

contract Util {
	static int DataLen = 1;
	static int StateLen = 3;
	static int InputSeqLen = 4;
	static int OutputValueLen = 8;
	static int PubKeyLen = 33;
	static int PubKeyHashLen = 20;
	static function toLEUnsigned(int n ,int l ): bytes {
		bytes m = num2bin(n, l + 1);
		return  m[0:  len(m) - 1];

	}
	static function fromLEUnsigned(bytes b ): int {
		return  unpack(b + b'00');

	}
	static function buildPublicKeyHashScript(Ripemd160 pubKeyHash ): bytes {
		return  (
			OpCode.OP_DUP +
			OpCode.OP_HASH160 +
			pack(Util.PubKeyHashLen) /* "OP_PUSHDATA0" */ +
			pubKeyHash +
			OpCode.OP_EQUALVERIFY +
			OpCode.OP_CHECKSIG
		);

	}
	static function buildOutput(bytes outputScript ,int outputSatoshis ): bytes {
		return  (
			num2bin(outputSatoshis, Util.OutputValueLen) +
			Util.writeVarint(outputScript)
		);

	}
	static function checkPreimageSigHashType(SigHashPreimage txPreimage ,SigHashType sigHashType ): bool {
		PrivKey privKey = PrivKey(
			0x621de38d9af72be8585d19584e3954d3fd0dc9752bb9f9fb28c4f9ed7c1e40ea
		);
		PubKey pubKey = PubKey(
			b'02773aca113a3217b67a95d5b78b69bb6386ed443ea5decf0ba92c00d179291921'
		);
		int invK = 0xa2103f96554aba49bbf581738d3b5a38c5a44b6238ffb54cfcca65b8c87ddc08;
		int r = 0x00f0fc43da25095812fcddde7d7cd353990c62b078e1493dc603961af25dfc6b60;
		bytes rBigEndian = b'00f0fc43da25095812fcddde7d7cd353990c62b078e1493dc603961af25dfc6b60';
		return  Tx.checkPreimageAdvanced(
			txPreimage,
			privKey,
			pubKey,
			invK,
			r,
			rBigEndian,
			sigHashType
		);

	}
	static function encodeStateSize(bytes state ): bytes {
		return  num2bin(len(state), Util.StateLen - 1 /* varint prefix byte */);

	}
	static function readVarint(bytes b ): bytes {
		int l = 0;
		bytes ret = b'';
		byte header = b[0];
		if (header == 'fd')  {
				l = this.fromLEUnsigned(b[1:  3]);
				ret = b[3:  3 + l];

	} else if (header == 'fe')  {
				l = this.fromLEUnsigned(b[1:  5]);
				ret = b[5:  5 + l];

	} else if (header == 'ff')  {
				l = this.fromLEUnsigned(b[1:  9]);
				ret = b[9:  9 + l];

	} else  {
				l = this.fromLEUnsigned(b[0:  1]);
				ret = b[1:  1 + l];

	}
		return  ret;

	}
	static function readVarintLen(bytes b ): int {
		int len = 0;
		byte header = b[0];
		if (header == 'fd')  {
				len = 3 + this.fromLEUnsigned(b[1:  3]);

	} else if (header == 'fe')  {
				len = 5 + this.fromLEUnsigned(b[1:  5]);

	} else if (header == 'ff')  {
				len = 9 + this.fromLEUnsigned(b[1:  9]);

	} else  {
				len = 1 + this.fromLEUnsigned(b[0:  1]);

	}
		return  len;

	}
	static function writeVarint(bytes b ): bytes {
		int n = len(b);
		bytes header = b'';
		if (n < 0xfd)  {
				header = this.toLEUnsigned(n, 1);

	} else if (n < 0x10000)  {
				header = b'fd' + this.toLEUnsigned(n, 2);

	} else if (n < 0x100000000)  {
				header = b'fe' + this.toLEUnsigned(n, 4);

	} else if (n < 0x10000000000000000)  {
				header = b'ff' + this.toLEUnsigned(n, 8);

	}
		return  header + b;

	}
	static function nVersion(SigHashPreimage preimage ): bytes {
		return  preimage[0:  4];

	}
	static function hashPrevouts(SigHashPreimage preimage ): bytes {
		return  preimage[4:  36];

	}
	static function hashSequence(SigHashPreimage preimage ): bytes {
		return  preimage[36:  68];

	}
	static function outpoint(SigHashPreimage preimage ): bytes {
		return  preimage[68:  104];

	}
	static function scriptCode(SigHashPreimage preimage ): bytes {
		return  Util.readVarint(preimage[104:  len(preimage)]);

	}
	static function valueRaw(SigHashPreimage preimage ): bytes {
		int l = len(preimage);
		return  preimage[l - 52:  l - 44];

	}
	static function value(SigHashPreimage preimage ): int {
		return  Util.fromLEUnsigned(Util.valueRaw(preimage));

	}
	static function nSequenceRaw(SigHashPreimage preimage ): bytes {
		int l = len(preimage);
		return  preimage[l - 44:  l - 40];

	}
	static function nSequence(SigHashPreimage preimage ): int {
		return  Util.fromLEUnsigned(Util.nSequenceRaw(preimage));

	}
	static function hashOutputs(SigHashPreimage preimage ): bytes {
		int l = len(preimage);
		return  preimage[l - 40:  l - 8];

	}
	static function nLocktimeRaw(SigHashPreimage preimage ): bytes {
		int l = len(preimage);
		return  preimage[l - 8:  l - 4];

	}
	static function nLocktime(SigHashPreimage preimage ): int {
		return  Util.fromLEUnsigned(Util.nLocktimeRaw(preimage));

	}
	static function sigHashType(SigHashPreimage preimage ): SigHashType {
		int l = len(preimage);
		return  SigHashType(preimage[l - 4:  len(preimage)]);

	}
	public function testPreimageParsing(SigHashPreimage preimage ) {
				require(Tx.checkPreimage(preimage));
		SigHashPreimage preimage_ = SigHashPreimage(
			Util.nVersion(preimage) + Util.hashPrevouts(preimage) + Util.hashSequence(preimage) + Util.outpoint(preimage) + Util.writeVarint(Util.scriptCode(preimage)) + Util.valueRaw(preimage) + Util.nSequenceRaw(preimage) + Util.hashOutputs(preimage) + Util.nLocktimeRaw(preimage) + Util.sigHashType(preimage)
		);
				require(preimage == preimage_);

	}
}