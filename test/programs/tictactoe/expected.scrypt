import "../util/contract.scrypt";

contract TicTacToe {
	PubKey alice;
	PubKey bob;
	static int TURNLEN = 1;
	static int BOARDLEN = 9;
	static byte EMPTY = '00';
	static byte ALICE = '01';
	static byte BOB = '02';
	public function move(int n ,Sig sig ,int amount ,SigHashPreimage txPreimage ) {
				require(Tx.checkPreimage(txPreimage));
				require(n >= 0 && n < TicTacToe.BOARDLEN);
		bytes scriptCode = Util.scriptCode(txPreimage);
		int scriptLen = len(scriptCode);
		int boardStart = scriptLen - TicTacToe.BOARDLEN;
		int turn = unpack(
			scriptCode[boardStart - TicTacToe.TURNLEN:  boardStart]
		);
		bytes board = scriptCode[boardStart:  len(scriptCode)];
				require(board[n] == TicTacToe.EMPTY);
		byte play = turn == 0 ? TicTacToe.ALICE : TicTacToe.BOB;
		PubKey player = turn == 0 ? this.alice : this.bob;
				require(checkSig(sig, player));
				board[n] = play;
		bytes outputs = b'';
		if (this.won(board, play))  {
		Ripemd160 playerPKH = ripemd160(sha256(player));
		bytes outputScript = Util.buildPublicKeyHashScript(playerPKH);
		bytes output = Util.buildOutput(outputScript, amount);
				outputs = output;

	} else if (this.full(board))  {
		Ripemd160 alicePKH = ripemd160(sha256(this.alice));
		bytes aliceScript = Util.buildPublicKeyHashScript(alicePKH);
		bytes aliceOutput = Util.buildOutput(aliceScript, amount);
		Ripemd160 bobPKH = ripemd160(sha256(this.bob));
		bytes bobScript = Util.buildPublicKeyHashScript(bobPKH);
		bytes bobOutput = Util.buildOutput(bobScript, amount);
				outputs = aliceOutput + bobOutput;

	} else  {
		bytes scriptCode_ = scriptCode[0:  scriptLen - TicTacToe.BOARDLEN] + num2bin(1 - turn, TicTacToe.TURNLEN) + board;
		bytes output = Util.buildOutput(scriptCode_, amount);

	}
				require(hash256(outputs) == Util.hashOutputs(txPreimage));

	}
	function won(bytes board ,byte play ): bool {
		return  (
			(board[0] == play && board[1] == play && board[2] == play) ||
			(board[3] == play && board[4] == play && board[5] == play) ||
			(board[6] == play && board[7] == play && board[8] == play) ||
			(board[0] == play && board[3] == play && board[6] == play) ||
			(board[1] == play && board[4] == play && board[7] == play) ||
			(board[2] == play && board[5] == play && board[8] == play) ||
			(board[0] == play && board[4] == play && board[8] == play) ||
			(board[2] == play && board[4] == play && board[6] == play)
		);

	}
	function full(bytes board ): bool {
		bool full = true;
		int i = 0;
				loop(9) {
		if (full)  {
		if (board[i] == TicTacToe.EMPTY)  {
				full = false;

	}

	}
				i = i + 1;

	}
		return  full;

	}
}