import "../util/contract.scrypt";

contract AdvancedTokenSale {
	int price;
	constructor(int price )  {
				this.price = price;

	}
	public function buy(SigHashPreimage txPreimage ,Ripemd160 changePKH ,int changeSats ,bytes buyer ,int numTokens ) {
		SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
				require(Util.checkPreimageSigHashType(txPreimage, sigHashType));
				require(0 < numTokens && numTokens < 128);
		bytes scriptCode = Util.scriptCode(txPreimage);
		int scriptLen = len(scriptCode);
		int oldBalance = Util.value(txPreimage);
		int newBalance = oldBalance + numTokens * this.price;
		bytes newSalesEntry = buyer + num2bin(numTokens, Util.DataLen);
		bytes scriptCode_ = scriptCode + newSalesEntry;
		bytes counterOutput = Util.buildOutput(scriptCode_, newBalance);
		bytes changeScript = Util.buildPublicKeyHashScript(changePKH);
		bytes changeOutput = Util.buildOutput(changeScript, changeSats);
		Sha256 hashOutputs = hash256(counterOutput + changeOutput);
				require(hashOutputs == Util.hashOutputs(txPreimage));

	}
}