import "../util/contract.scrypt";

contract Reader {
	bytes buf;
	int pos;
	constructor(bytes buf )  {
				this.buf = buf;
				this.pos = 0;

	}
	function eof(): bool {
		return  this.pos >= len(this.buf);

	}
	function readBytes(): bytes {
		bytes ret = Util.readVarint(this.buf[this.pos:  len(this.buf)]);
		int l = Util.readVarintLen(this.buf[this.pos:  len(this.buf)]);
				this.pos = this.pos + l;
		return  ret;

	}
	function readBool(): bool {
		return  this.readBytes() != b'00';

	}
	function readInt(): int {
		return  unpack(this.readBytes());

	}
}
contract Writer {
	static function writeBytes(bytes x ): bytes {
		return  Util.writeVarint(x);

	}
	static function writeBool(bool x ): bytes {
		return  this.writeBytes(x ? b'01' : b'00');

	}
	static function writeInt(int x ): bytes {
		return  this.writeBytes(pack(x));

	}
}
contract Test {
	public function main(bool f ,bytes b ,int i ) {
		 {
		bytes buf = Writer.writeBool(f);
		Reader r = new Reader(buf);
		bool f_ = r.readBool();
				require(f_ == f);
				require(r.eof());

	}
		 {
		bytes buf = Writer.writeBytes(b);
		Reader r = new Reader(buf);
		bytes b_ = r.readBytes();
				require(b_ == b);
				require(r.eof());

	}
		 {
		bytes buf = Writer.writeInt(i);
		Reader r = new Reader(buf);
		int i_ = r.readInt();
				require(i_ == i);
				require(r.eof());

	}
		bytes buf = Writer.writeInt(i) + Writer.writeBytes(b) + Writer.writeBytes(b) + Writer.writeBool(f) + Writer.writeInt(i) + Writer.writeBytes(b);
		Reader r = new Reader(buf);
		int i_ = r.readInt();
				require(i_ == i);
				require(!r.eof());
		bytes b_ = r.readBytes();
				require(b_ == b);
				b_ = r.readBytes();
				require(b_ == b);
		bool f_ = r.readBool();
				require(f_ == f);
				i_ = r.readInt();
				require(i_ == i);
				b_ = r.readBytes();
				require(b_ == b);
				require(r.eof());

	}
}