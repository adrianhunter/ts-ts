import "../util/contract.scrypt";

contract Token {
	public function transfer(PubKey sender ,Sig senderSig ,PubKey receiver ,int value ,SigHashPreimage txPreimage ,int amount ) {
				require(Tx.checkPreimage(txPreimage));
				require(checkSig(senderSig, sender));
		bytes lockingScript = Util.scriptCode(txPreimage);
		int scriptLen = len(lockingScript);
		int pkStart = scriptLen - (Util.PubKeyLen + Util.DataLen) * 2;
		PubKey pk0 = PubKey(
			lockingScript[pkStart:  pkStart + Util.PubKeyLen]
		);
		int balance0 = unpack(
			lockingScript[pkStart + Util.PubKeyLen:  pkStart + Util.PubKeyLen + Util.DataLen]
		);
		PubKey pk1 = PubKey(
			lockingScript[pkStart + Util.PubKeyLen + Util.DataLen:  pkStart + 2 * Util.PubKeyLen + Util.DataLen]
		);
		int balance1 = unpack(
			lockingScript[scriptLen - Util.DataLen:  len(lockingScript)]
		);
				require(
			(sender == pk0 && receiver == pk1) || (sender == pk1 && receiver == pk0)
		);
		if (sender == pk0)  {
				require(balance0 >= value);
				balance0 = balance0 - value;
				balance1 = balance1 + value;

	} else  {
				require(balance1 >= value);
				balance1 = balance1 - value;
				balance0 = balance0 + value;

	}
		bytes lockingScript_ = lockingScript[0:  pkStart] + pk0 + num2bin(balance0, Util.DataLen) + pk1 + num2bin(balance1, Util.DataLen);
		bytes output = Util.buildOutput(lockingScript_, amount);
				require(hash256(output) == Util.hashOutputs(txPreimage));

	}
}